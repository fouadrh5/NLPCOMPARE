################################ About this script  #################################
##Description:
    ##The idea of this script is to use the NLP parsers to generate the Part of speech tags and compare the result between the different parsers. 
    ##This Python script will be used to run any parser out of the following parsers and compare the Part of speach tags between them:
    ##Stanford parser
    ##Google parser
    ##SpaCY parser
    ##NLTK parser
    ##Also, the user has the option to run them one by one or to run them all on the same input file.
    ##This will save him/her a lot of time instead of waiting each parser to finish.
    ##All the options will be provided on easy-followed menu that will not terminate unless specified by the user.
    ##This script 
##Quick dependency to be able to run it
    ##Python 2.7.12 
    ##Install all the above mentioned parsers
    ##Xcode_11_beta_6
    ##Ensure that the location of this file to be under the Stanford directory

##Usage:
## You need to change the path from /Users/fouadomran/mytmp/ to a dirctory
##that has all the input file including the excel sheet
##python NLPCompare.py
##Then follow the questions asked by the script
##make sure all the provided files are being created in advance to
##prevent any issues in running the script or any unpleasant exceptions

##Workflow
##The workflow of the program will be as follow:
    ##The program will read the given input file (full path to the input file)
    ##Make sure that the input file is in ASCII Codec schema
    ##The program will output two types of files:
        ##1- Excel file (.xlsx) that has all the parsers that you have select like : parser name| POS |parser name | POS ...so on 
        ##and also will compare the result of each parser with each others along with generating some statisitics 
        ##2- the output file of each parser as generated by the parser with initial preprocessing i.e. before process it to be in the .xlsx format 

##Info:
    ##Written by Fouad Al Omran
    ##Version 11.1
    ##Date: 11 Oct 2016

################################ Needed Modules #####################################

import subprocess

##NLTK needed modules
import nltk,os
from nltk.tokenize import word_tokenize

##sapCy needed modules
from spacy.en import English

##stanford needed modules
from parser import Parser

##Excel Modules 
from openpyxl import Workbook
from openpyxl.styles import Font
from openpyxl import load_workbook

##copying files for the google syntaxnet files
from shutil import copyfile
import copy


########################### End of Needed Modules ###################################

########################### Start of definitions ###################################

#### stanfordDef takes two arguments (directories) and the input file will be
#### processed by calling the stanford coreNLP python parser
#### After processing the output file will be processed to be
### formatted and pushed to an Excel sheet

def stanfordDef(inputDir,outputDir):

    with open(inputDir) as fileInput:
        data="".join(line.rstrip('\n') for line in fileInput)

    if len(data) != 0:
        
        print ("The content of the file is:\n")
        print (data)
        print ("Pre-processing the input ...")
        
        #Empty the output file
        open(outputDir, 'w').close()
        
        stanford_parser = Parser()
        with open(inputDir) as fileInput:
            for line in fileInput:
                line = line.strip()
                dependencies = stanford_parser.parseToStanfordDependenciesFouad(str(line))
                with open(outputDir,"a") as fileOutput:
                    fileOutput.write(dependencies)
                    print(dependencies)    
#        print ("\nThe parsing output: \n")
#        with open(outputDir,"r") as fileInput:
#            for line in fileInput:
#                print line

        ########Write to Excel#######
        wb = load_workbook(excelOutputFile)
        # grab the active worksheet
        ws = wb.active
        ws.title = "Parsers_outputs"
        ws['A1'] = "Stanford"
        ws['B1'] = "POS"
        headerCell1 =  ws['A1']
        headerCell2 =  ws['B1']
        headerCell1.font = headerCell1.font.copy(bold=True)
        headerCell2.font = headerCell2.font.copy(bold=True)
            
        print ("\n*** The output file is before exporting to Excel format " + outputDir +" ***\n")

        with open(outputDir,"r") as fileInput:
            row = 2
            for line in fileInput:
                print line
                a,b = line.split( )
                ws['A'+str(row)] = a
                ws['B'+str(row)] = b
                row = row + 1
            # Save the file
        wb.save(excelOutputFile)
    else:
        print("The file is empty.\n")

        
#### googleDef takes two arguments (directories) and the input file will be
#### processed by calling the Syntaxnet parser by editing the context.pbtxt
#### with the right information like the input file and output file directories
#### After processing the output file will be processed to be
### formatted and pushed to an Excel sheet
    
def googleDef(inputDir,outputDir):

    print ("The content of the file is:\n")
    line = ""
    with open(inputDir,"r") as fileInput:
        for line in fileInput:
            print(line)
    fileInput.close()
    
    if line.strip() != "":
        
        os.chdir("/Users/fouadomran/Desktop/GitHub/models/syntaxnet")
        demoFile = "/Users/fouadomran/Desktop/GitHub/models/syntaxnet/syntaxnet/demo.sh"
        contextFile = "/Users/fouadomran/Desktop/GitHub/models/syntaxnet/syntaxnet/models/parsey_mcparseface/context.pbtxt"

        # Read the context.pbtxt file
        filedata = None
        with open(contextFile, 'r') as file :
          filedata = file.read()

        #Reset the configuration file (context.pbtxt)
        copyfile("/Users/fouadomran/Desktop/GitHub/models/syntaxnet/syntaxnet/models/parsey_mcparseface/context.pbtxt.bak", "/Users/fouadomran/Desktop/GitHub/models/syntaxnet/syntaxnet/models/parsey_mcparseface/context.pbtxt")

        #Take a back up of the configuration file (context.pbtxt)
        copyfile("/Users/fouadomran/Desktop/GitHub/models/syntaxnet/syntaxnet/models/parsey_mcparseface/context.pbtxt", "/tmp/context.bak")
        # Replace the target strings
        filedata = filedata.replace('    file_pattern: "ReplaceMe_input"', '    file_pattern: "'+inputDir+'"')
        filedata = filedata.replace('    file_pattern: "ReplaceMe_output"', '    file_pattern: "'+outputDir+'"')
        filedata = filedata.replace('    file_pattern: "ReplaceMe_tree"', '    file_pattern: "'+outputDir+'_dependency_tree"')
        # Write the file out again
        with open(contextFile, 'w') as file:
          file.write(filedata)

            
        subprocess.call(["syntaxnet/demo.sh "], shell = True)
        #Copy back the backup file to the original file to preserve the file 
        copyfile("/tmp/context.bak","/Users/fouadomran/Desktop/GitHub/models/syntaxnet/syntaxnet/models/parsey_mcparseface/context.pbtxt")

        ########Write to Excel#######
        wb = load_workbook(excelOutputFile)
        # grab the active worksheet
        ws = wb.active
        ws.title = "Parsers_outputs"
        ws['C1'] = "SyntaxNet"
        ws['D1'] = "POS"
        ws['E1'] = "POS2"
        headerCell1 =  ws['C1']
        headerCell2 =  ws['D1']
        headerCell3 =  ws['E1']
        headerCell1.font = headerCell1.font.copy(bold=True)
        headerCell2.font = headerCell2.font.copy(bold=True)
        headerCell3.font = headerCell3.font.copy(bold=True)

        f = open(inputDir)
        line = f.readline()
        j = 0
        brack = []
        while line:
            print line 
            char = list(line)
            for i in range(0,len(char)):
                if char[i] == "{" or char[i] == "}" or char[i] == "(" or char[i] == ")" or char[i] == "[" or char[i] == "]":
                    brack.insert(j, char[i])
                    j = j+1           
            line = f.readline()
        f.close()

        print brack
        print ("\nThe parsing output: \n")
        row = 2
        j = 0 
        with open(outputDir,"r") as fileInput:
            for line in fileInput:
                print(line)

                if not isBlank (line):
                    splitArray = line.split('\t')
                    a = splitArray[1]
                    b = splitArray[3]
                    c = splitArray[4]

                    if ( "RB-" in a):
                        a = brack[j]
                        j = j + 1
                    
                    ws['C'+str(row)] = a
                    ws['D'+str(row)] = b
                    ws['E'+str(row)] = c
                    row = row + 1
            # Save the file
        wb.save(excelOutputFile)
            
        print ("\n*** The output file is " + outputDir +" and the output of the depndency parsing tree is  "+ outputDir +"_dependency_tree ***\n")
        
    else:
        print("The file is empty.\n")
        
#### spaCYDef takes two arguments (directories) and the input file will be
#### processed by calling the spaCY nlp english parser
#### After processing the output file will be processed to be
### formatted and pushed to an Excel sheet
    
def spaCYDef(inputDir,outputDir):
    
    with open(inputDir) as fileInput:
        data=" ".join(line.rstrip('\n') for line in fileInput)
        
    #Checking first if the input file is not empty before loading the parser    
    if len(data) != 0:
        print ("The content of the file is:\n")
        print (data)
        
        print ("\nUploading the module for parsing...\n")
        nlp = English()
        print ("Done with uploading.\n")
        parsedData = nlp(u""+str(data))

        sents = []
        ########Write to Excel#######
        wb = load_workbook(excelOutputFile)
        # grab the active worksheet
        ws = wb.active
        ws.title = "Parsers_outputs"
        ws['F1'] = "spaCY"
        ws['G1'] = "POS"
        headerCell1 =  ws['F1']
        headerCell2 =  ws['G1']
        headerCell1.font = headerCell1.font.copy(bold=True)
        headerCell2.font = headerCell2.font.copy(bold=True)
        
        row = 2
        
        print ("The parsing output: \n")
        for span in parsedData.sents:
            sent = [parsedData[i] for i in range(span.start, span.end)] 
            for token in sent:
                if (str(token.tag_) != "SP"):
                    s = token.orth_, token.tag_
                    print(s)
                    st =str(s)
                    if str("u'\"', u\"''\"") in st:
                        begS= st[3:]
                        endS = begS[:-2]
                        a,b = endS.split('\', u\"')
                        ws['F'+str(row)] = a
                        ws['G'+str(row)] = b
                        row = row + 1
                    elif "u\"''" in st:
                        begS= st[3:]
                        endS = begS[:-2]
                        a,b = endS.split('", u\"')
                        ws['F'+str(row)] = a
                        ws['G'+str(row)] = b
                        row = row + 1
                    else:
                        begS= st[3:]
                        endS = begS[:-2]
                        a,b = endS.split(', u\'')
                        a = a[:-1]
                        ws['F'+str(row)] = a
                        ws['G'+str(row)] = b
                        row = row + 1
                    
                    with open(outputDir,"a") as fileOutput:
                        fileOutput.write(str(s)+"\n")
        # Save the file
        wb.save(excelOutputFile)
        print ("\n*** The output file is " + outputDir +" ***\n")
    else:
        print("The file is empty.\n")
        
#### NLTKDef takes two arguments (directories) and the input file will be
#### processed by calling the NLTK toolkit parser 
#### After processing the output file will be processed to be
### formatted and pushed to an Excel sheet

def NLTKDef(inputDir,outputDir):
    with open(str(inputDir)) as fileInput:
        data=" ".join(line.rstrip('\n') for line in fileInput)
        
    #Checking first if the input file is not empty before loading the parser 
    if len(data) != 0:
        print ("The content of the file is:\n")
        print (data)
        print ("\nThe parsing output: \n")
        
        wordsTokenized = word_tokenize(u" "+str(data))
    
        ########Write to Excel#######
        wb = load_workbook(excelOutputFile)
        # grab the active worksheet
        ws = wb.active
        ws.title = "Parsers_outputs"
        ws['H1'] = "NLTK"
        ws['I1'] = "POS"
        headerCell1 =  ws['H1']
        headerCell2 =  ws['I1']
        headerCell1.font = headerCell1.font.copy(bold=True)
        headerCell2.font = headerCell2.font.copy(bold=True)
        
        row = 2
        
        for i in wordsTokenized:
            words = nltk.word_tokenize(i)
            tagged = nltk.pos_tag(words)
            print (tagged)
            s = str(tagged)
            if "\"''" in s:
                begS= s[4:]
                endS = begS[:-3]
                a,b = endS.split('\", \"')
                ws['H'+str(row)] = a
                ws['I'+str(row)] = b
                row = row + 1
            else:
                if "), (u" in s:
                    r,l =s.split('), (u')
                    begS= r[4:]
                    endS = begS[:-1]
                    a,b = endS.split(', \'')
                    a = a[:-1]

                    ws['H'+str(row)] = a
                    ws['I'+str(row)] = b
                    row = row + 1

                    begS= l[1:]
                    endS = begS[:-3]
                    a,b = endS.split('\', \'')

                    ws['H'+str(row)] = a
                    ws['I'+str(row)] = b
                    row = row + 1

                else:   
                    begS= s[4:]
                    endS = begS[:-3]
                    a,b = endS.split(', \'')
                    a = a[:-1]
                    ws['H'+str(row)] = a
                    ws['I'+str(row)] = b
                    row = row + 1
            # Save the file
        wb.save(excelOutputFile)
        
        with open(outputDir,"a") as fileOutput:
            fileOutput.write(str(tagged)+"\n")

        print ("\n*** The output file is " + outputDir +" ***\n")
    else:
        print("The file is empty.\n")


########################### defs for the comparsion part of the program ###################################

#### isBlank uses to check if the given user input is empty or not
    
def isBlank (myString):
    if myString and myString.strip():
        #myString is not None AND myString is not empty or blank
        return False
    #myString is None OR myString is empty or blank
    return True

def formatTwoListsFromExcelSheet(columnWordsParser1,columnPosParser1,columnWordsParser2,columnPosParser2,excelFileDir,excelPageTitle):
    
    wb = load_workbook(excelFileDir)
    # grab the active worksheet
    ws = wb.active
    ws.title = excelPageTitle
    parserName1 = str(ws[str(columnWordsParser1)+str(1)].value)
    parserName2 = str(ws[str(columnWordsParser2)+str(1)].value)

    #initialized two list for each pair of columns 
    combinedParserList1 = []
    combinedParserList2 = []

    #Retrive the given columns names to combain the cell contents of columnWordsParser1 and columnPosParser1
    #in the following form columnWordsParser1_$$_columnPosParser1
    
    row = 1

    while str(ws[columnWordsParser1+str(row)].value) != 'None':
        combinedParserList1.append(str(ws[columnWordsParser1+str(row)].value)+"_$$_"+str(ws[columnPosParser1+str(row)].value))
        row = row + 1

    print ("\n"+parserName1+" list :- \n")
    for i in range(0,len(combinedParserList1)):
        print(combinedParserList1[i])

    #Retrive the given columns names to combain columnWordsParser2 and columnPosParser2
    #in the following form columnWordsParser2_$$_columnPosParser2 
    row = 1
    
    while str(ws[columnWordsParser2+str(row)].value) != 'None':
        combinedParserList2.append(str(ws[columnWordsParser2+str(row)].value)+"_$$_"+str(ws[columnPosParser2+str(row)].value))
        row = row + 1

    print ("\n"+parserName2+" list :- \n")
    for i in range(0,len(combinedParserList2)):
        print(combinedParserList2[i])

    return combinedParserList1,combinedParserList2

def formatTwoListsFromExcelSheetforTokensOnly(columnWordsParser1,columnWordsParser2,excelFileDir,excelPageTitle):
    
    wb = load_workbook(excelFileDir)
    # grab the active worksheet
    ws = wb.active
    ws.title = excelPageTitle
    parserName1 = str(ws[str(columnWordsParser1)+str(1)].value)
    parserName2 = str(ws[str(columnWordsParser2)+str(1)].value)

    #initialized two list for each pair of columns 
    combinedParserList1 = []
    combinedParserList2 = []

    #Retrive the given columns names to combain the cell contents of columnWordsParser1 and columnPosParser1
    #in the following form columnWordsParser1_$$_columnPosParser1
    
    row = 1

    while str(ws[columnWordsParser1+str(row)].value) != 'None':
        combinedParserList1.append(str(ws[columnWordsParser1+str(row)].value)+"_$$_")
        row = row + 1

    print ("\n"+parserName1+" list :- \n")
    for i in range(0,len(combinedParserList1)):
        print(combinedParserList1[i])

    #Retrive the given columns names to combain columnWordsParser2 and columnPosParser2
    #in the following form columnWordsParser2_$$_columnPosParser2 
    row = 1


    while str(ws[columnWordsParser2+str(row)].value) != 'None':

        combinedParserList2.append(str(ws[columnWordsParser2+str(row)].value)+"_$$_")
        row = row + 1

    print ("\n"+parserName2+" list :- \n")
    for i in range(0,len(combinedParserList2)):
        print(combinedParserList2[i])

    return combinedParserList1,combinedParserList2

def retriveExcelColumn(column1,excelFileDir,excelPageTitle ):
    wb = load_workbook(excelFileDir)
    # grab the active worksheet
    ws = wb.active
    ws.title = excelPageTitle
    
    columnList = []
    row = 2

    while str(ws[column1+str(row)].value) != 'None':
        columnList.insert(row,str(ws[column1+str(row)].value))
        row = row + 1

    return columnList   

def retrivePOfromList(columnPOS1,excelFileDir,excelPageTitle):
    
    wb = load_workbook(excelFileDir)
    # grab the active worksheet
    ws = wb.active
    ws.title = excelPageTitle
    parserName1 = str(ws[str(columnPOS1)+str(1)].value)
    #parserName2 = str(ws[str(columnPOS2)+str(1)].value)

    #initialized two list for each pair of columns 
    combinedParserList1 = []
    combinedParserList2 = []
    
    row = 2
    k = 0
    toBeChangedTagsList = ["JJR" ,"JJS", "NNS", "NNP" ,"NNPS" ,"RBR" ,"RBS" ,"VBD" ,"VBG" ,"VBN" ,"VBP" ,"VBZ", "WP$", "PRP$"]
        
    while str(ws[columnPOS1+str(row)].value) != 'None':
        if str(ws[columnPOS1+str(row)].value)  in toBeChangedTagsList:
            combinedParserList1.insert(k,str(ws[columnPOS1+str(row)].value[:2]))
 
        else:
            combinedParserList1.insert(k,str(ws[columnPOS1+str(row)].value))   

        row = row + 1
        k = k + 1

    return combinedParserList1

def postToExcel(listToPost, excelFileName, pageTitle, columnLetter, columnTitle):
    
    ########Write to Excel#######
    wb = load_workbook(str(excelFileName))
    # grab the active worksheet
    ws = wb.active
    ws.title = str(pageTitle)
    topCell = ws[str(columnLetter)+str(1)]
    topCell.value = str(columnTitle)
    topCell.font = topCell.font.copy(bold=True)

    row = 2

    for i in range(0,len(listToPost)):
        ws[str(columnLetter)+str(row)] = listToPost[i]
        row = row + 1
        
    #Save the file
    wb.save(excelFileName)

def updateOneExcelCell(excelFileName, pageTitle, cellName, newCell):
    
    ########Write to Excel#######
    wb = load_workbook(str(excelFileName))
    # grab the active worksheet
    ws = wb.active
    ws.title = str(pageTitle)
    ws[str(cellName)].value = newCell
    #Save the file
    wb.save(excelFileName)

def mergeTwoExcelCells(excelFileName, pageTitle, cell1, cell2, mergeName):

    ########Write to Excel#######
    wb = load_workbook(str(excelFileName))
    # grab the active worksheet
    ws = wb.active
    ws.title = str(pageTitle)
    ws.merge_cells(str(cell1)+':'+str(cell2))
    calCell = ws[str(cell1)]
    calCell.value = mergeName
    calCell.font = calCell.font.copy(bold=True)
    #Save the file
    wb.save(excelFileName)

def unmergeTwoExcelCells(excelFileName, pageTitle, cell1, cell2):

    ########Write to Excel#######
    wb = load_workbook(str(excelFileName))
    # grab the active worksheet
    ws = wb.active
    ws.title = str(pageTitle)
    ws.unmerge_cells(str(cell1)+':'+str(cell2))
    #Save the file
    wb.save(excelFileName)

def postStatToExcel4TwoParsers(excelOutputFile, pageTitle, cellLetter1, cellLetter2, list1, list2, POS_list1, POS_list2,paraNum):

    list1Name = (str(list1[0]).split('_$$_'))[0]
    list2Name = (str(list2[0]).split('_$$_'))[0] 
    cLetter1 = str(cellLetter1)
    cLetter2 = str(cellLetter2)
    
    mergeTwoExcelCells(excelOutputFile, str(pageTitle), cLetter1+str(1), cLetter2+str(1), "Statistics for "+list1Name+" and "+list2Name)

    ##Extract the number of paragraph 
    if (paraNum != 0):
        paraNumber = str(paraNum)

        updateOneExcelCell(excelOutputFile, str(pageTitle), cLetter1+str(2), "paragraph number ")
        updateOneExcelCell(excelOutputFile, str(pageTitle), cLetter2+str(2), paraNumber)

    ##Extract the number of tokens/POS from the first parser

    tokensNumberParser1 = str(len(list1)-1)

    updateOneExcelCell(excelOutputFile, str(pageTitle), cLetter1+str(3), "token/POS number in "+list1Name)
    updateOneExcelCell(excelOutputFile, str(pageTitle), cLetter2+str(3), tokensNumberParser1)

    ##Extract the number of tokens/POS from the second parser

    tokensNumberParser2 = str(len(list2)-1)

    updateOneExcelCell(excelOutputFile, str(pageTitle), cLetter1+str(4), "token/POS number in "+list2Name)
    updateOneExcelCell(excelOutputFile, str(pageTitle), cLetter2+str(4), tokensNumberParser2)

    ##The number of similar of word_$$_POS pair between the first and the second parser

    similarityCount = 0
    differenceCount = 0
    similarArray = []
    k = 0
    for i in range(0,len(POS_list1)):
        if (POS_list1[i] == POS_list2[i]):
            similarityCount = similarityCount + 1
            similarArray.insert(k,POS_list1[i])
            k = k + 1
        else:
            differenceCount = differenceCount + 1  

    similarityNumber = str(similarityCount)

    updateOneExcelCell(excelOutputFile, str(pageTitle), cLetter1+str(5), "similarity number between "+list1Name+" and "+list2Name)
    updateOneExcelCell(excelOutputFile, str(pageTitle), cLetter2+str(5), similarityNumber)

    differenceNumber = str(differenceCount)

    updateOneExcelCell(excelOutputFile, str(pageTitle), cLetter1+str(6), "difference number between "+list1Name+" and "+list2Name)
    updateOneExcelCell(excelOutputFile, str(pageTitle), cLetter2+str(6), differenceNumber)

    # calculating the percentage of similarity
    percentageSimilarity = (float(similarityCount)/((float(tokensNumberParser1) + float(tokensNumberParser2))/2))*100
    percentageSimilarity = "{0:.2f}".format(percentageSimilarity)
    updateOneExcelCell(excelOutputFile, str(pageTitle), cLetter1+str(7), "similarity percentage between "+list1Name+" and "+list2Name)
    updateOneExcelCell(excelOutputFile, str(pageTitle), cLetter2+str(7), str(percentageSimilarity))

    # calculating the percentage of differences
    percentageDifference = (float(differenceCount)/((float(tokensNumberParser1) + float(tokensNumberParser2))/2))*100
    percentageDifference = "{0:.2f}".format(percentageDifference)
    
    updateOneExcelCell(excelOutputFile, str(pageTitle), cLetter1+str(8), "difference percentage between "+list1Name+" and "+list2Name)
    updateOneExcelCell(excelOutputFile, str(pageTitle), cLetter2+str(8), str(percentageDifference))

    return similarArray
def compareTwoListsOfParsers(list1, list2):

    #similarStrings = []
    #notSimilarList = []
    cell1Items = [] 
    cell2Items = []
    list1AfterComp = []
    list2AfterComp = []

    print (" ---------------------------------------------------------------------")
    print (" ---------------------------------------------------------------------")
    print (" ---------------------------------------------------------------------")
    print (" Start of #####################" ,list1[0], " and ",list2[0]," -----------------------------------------------------")
    print (" ---------------------------------------------------------------------")
    print (" ---------------------------------------------------------------------")
    p1 = 1
    p2 = 1
    p3 = 0
    p4 = 0
    p5 = 0
    p6 = 0
    excelrow = 2
    infinite = 1 
    cell1Still = 0
    cell2Still = 0
    concatStr1 = ""
    concatStr2 = ""
    while (infinite == 1):
        #print (" lengths ","len(list1) ", len(list1)," len(list2) ",len(list2), "p1 ",p1, "p2 ",p2," p3 ", p3 ," p4 ", p4)
       

        if (len(list1) == p1 and len(list2)-1 == p2):
            print (" first if ","len(list1) ", len(list1)," len(list2) ",len(list2), "p1 ",p1, "p2 ",p2," p3 ", p3 ," p4 ", p4)
            #notSimilarList.insert(p4, list2[p2 -1])
            p1 = p1 - 1
            break
            
        elif (len(list2) == p2 and len(list1)-1 == p1):
            #notSimilarList.insert(p4, list1[p1 -1])
            p2 = p2 - 1
            break
        elif (len(list2) == p2 and len(list1) == p1 ):
            #print (" secand ielf ","len(list2) ",len(list2), "p1 ",p1, "p2 ",p2," p3 ", p3 ," p4 ", p4)
            break

        else:
            #print (" equality ","len(list1) ", len(list1),"value", list1[p1], "len(list2) ",len(list2), "p1 ",p1, "p2 ",p2," p3 ", p3 ," p4 ", p4)
            if list1[p1] == list2[p2]:
                #similarStrings.insert(p3, list1[p1])
                print (list1[p1], " is equal to ", list2[p2] )
                list1AfterComp.insert(excelrow,list1[p1])
                list2AfterComp.insert(excelrow,list2[p2])

                excelrow = excelrow + 1 
            else:
                cell1 = list(list1[p1])
                cell2 = list(list2[p2])
                originCell1 = list1[p1]
                originCell2 = list2[p2] 

                if (cell1Still == 1):  
                    c2 = 0
                    cell1Still = 0
                elif (cell2Still == 1): 
                    c1 = 0
                    cell2Still = 0 
                else:
                    c1 = 0
                    c2 = 0

                while(infinite == 1):

                    if (len(cell1) == c1 ):
                        
                        concatStr1 = ""
                        for i in range(0,len(cell1Items)):
                            concatStr1 += " "+cell1Items[i]
                        concatStr1 = concatStr1 + " "+originCell1
                        print "After concatenation 1 ",concatStr1
                        list1AfterComp.insert(excelrow,concatStr1)

                        concatStr2 = ""
                        for i in range(0,len(cell2Items)):
                            concatStr2 += " "+cell2Items[i]
                        concatStr2 = concatStr2 + " "+originCell2
                        print "After concatenation 2",concatStr2
                        list2AfterComp.insert(excelrow,concatStr2)

                        print (concatStr1 ," is not equal to (empty1)", concatStr2 )

                        excelrow = excelrow + 1       
                        break

                    elif (len(cell2) == c2):
                        print (originCell1 ," is not equal to (empty2)", originCell2 )
                        list1AfterComp.insert(excelrow,originCell1)
                        list2AfterComp.insert(excelrow,originCell2)
                        excelrow = excelrow + 1  
                        break 

                    elif (cell2[c2].strip() == True ):
                        print (originCell1 ," is not equal to (cell2 is empty) ", originCell2 )
                        list1AfterComp.insert(excelrow,originCell1)
                        list2AfterComp.insert(excelrow,originCell2)
                        excelrow = excelrow + 1  
                        break

                    elif (cell1[c1].strip() == True ):
                        print (originCell1 ," is not equal to (cell1 is empty)", originCell2 )
                        list1AfterComp.insert(excelrow,originCell1)
                        list2AfterComp.insert(excelrow,originCell2)
                        excelrow = excelrow + 1  
                        break

                    else:
                        if (cell1[c1] == cell2[c2] ):

                            if (len(cell1) == c1 and len(cell2) == c2):
                                break

                            else:
                                print("cell1 ", cell1[c1], "cell2 ",cell2[c2])
                               # cell1Still = 0 
                                #cell2Still = 0 
                        else: 

                            if (c1+1 <= len(cell1)-1 and c2+1 <= len(cell2)-1):
                                
                                if (cell1[c1] != "_" and cell1[c1+1] != "$" and cell2[c2] == "_" and cell2[c2+1] == "$"  ):
                                    cell2Items.insert(p5,originCell2)
                                    p5 = p5 + 1
                                    cell1Still = 1
                                    break

                                elif (cell1[c1] == "_" and cell1[c1+1] == "$" and cell2[c2] != "_" and cell2[c2+1] != "$"  ):
                                    cell1Items.insert(p6,originCell1)

                                    p6 = p6 + 1
                                    cell2Still = 1  
                                    break 

                                else:
                                    
                                    if (len(cell1Items) > 0):
                                        print (originCell1 ," is not equal to ", originCell2 , "1 previous items if any ",cell1Items)
                                        concatStr1 = ""
                                        for i in range(0,len(cell1Items)):
                                            concatStr1 += " "+cell1Items[i]
                                        concatStr1 = concatStr1 + " "+originCell1
                                        print "After concatenation 3",concatStr1
                                        list1AfterComp.insert(excelrow,concatStr1)
                                        list2AfterComp.insert(excelrow,originCell2)
                                        #updateOneExcelCell(excelOutputFile, "Parsers_outputs", "K"+str(excelrow), concatStr1) 
                                        #updateOneExcelCell(excelOutputFile, "Parsers_outputs", "L"+str(excelrow), str(originCell2))
                                        excelrow = excelrow + 1                                     
                                        #notSimilarList.insert(p4,originCell1)
                                        break
                                    elif (len(cell2Items) > 0):
                                        print (originCell1 ," is not equal to ", originCell2 , "2 previous items if any ",cell2Items)
                                        concatStr1 = ""
                                        for i in range(0,len(cell2Items)):
                                            concatStr1 += " "+cell2Items[i]
                                        concatStr1 = concatStr1 + " "+originCell2
                                        print "After concatenation 4",concatStr1
                                        list1AfterComp.insert(excelrow,originCell1)
                                        list2AfterComp.insert(excelrow,concatStr1)
                                        #updateOneExcelCell(excelOutputFile, "Parsers_outputs", "K"+str(excelrow), str(originCell1)) 
                                        #updateOneExcelCell(excelOutputFile, "Parsers_outputs", "L"+str(excelrow), concatStr1)
                                        excelrow = excelrow + 1 
                                        #notSimilarList.insert(p4,originCell1)
                                        break
                                    else:
                                        print (originCell1 ," is not equal to ", originCell2, "3 NO previous items ")
                                        list1AfterComp.insert(excelrow,originCell1)
                                        list2AfterComp.insert(excelrow,originCell2)
                                        #updateOneExcelCell(excelOutputFile, "Parsers_outputs", "K"+str(excelrow), str(originCell1)) 
                                        #updateOneExcelCell(excelOutputFile, "Parsers_outputs", "L"+str(excelrow), str(originCell2))
                                        excelrow = excelrow + 1 
                                        #notSimilarList.insert(p4,originCell1)
                                        break
                            else:
                                if (len(cell1Items) > 0):
                                    print (originCell1 ," is not equal to ", originCell2 , "4 previous items ",cell1Items)
                                    concatStr1 = ""
                                    for i in range(0,len(cell1Items)):
                                        concatStr1 += " "+cell1Items[i]
                                    concatStr1 = concatStr1 + " "+originCell1
                                    print "After concatenation 5",concatStr1
                                    list1AfterComp.insert(excelrow,concatStr1)
                                    list2AfterComp.insert(excelrow,originCell2)
                                    #updateOneExcelCell(excelOutputFile, "Parsers_outputs", "K"+str(excelrow), concatStr1) 
                                    #updateOneExcelCell(excelOutputFile, "Parsers_outputs", "L"+str(excelrow), str(originCell2))
                                    excelrow = excelrow + 1         
                                    #notSimilarList.insert(p4,originCell1)
                                    break

                                elif (len(cell2Items) > 0):
                                    print (originCell1 ," is not equal to ", originCell2 , "5 previous items ",cell2Items)
                                    concatStr1 = ""
                                    for i in range(0,len(cell2Items)):
                                        concatStr1 += " "+cell2Items[i]
                                    concatStr1 = concatStr1 + " "+originCell2
                                    print "After concatenation 6",concatStr1
                                    list1AfterComp.insert(excelrow,originCell1)
                                    list2AfterComp.insert(excelrow,concatStr1)
                                    #updateOneExcelCell(excelOutputFile, "Parsers_outputs", "K"+str(excelrow), str(originCell1)) 
                                    #updateOneExcelCell(excelOutputFile, "Parsers_outputs", "L"+str(excelrow), concatStr1)
                                    excelrow = excelrow + 1 
                                    #notSimilarList.insert(p4,originCell1)

                                    break

                                else:
                                    print (originCell1 ," is not equal to ", originCell2 ,"6 NO previous items ")
                                    list1AfterComp.insert(excelrow,originCell1)
                                    list2AfterComp.insert(excelrow,originCell2)
                                    #updateOneExcelCell(excelOutputFile, "Parsers_outputs", "K"+str(excelrow), str(originCell1)) 
                                    #updateOneExcelCell(excelOutputFile, "Parsers_outputs", "L"+str(excelrow), str(originCell2))
                                    excelrow = excelrow + 1 
                                    #notSimilarList.insert(p4,originCell1)
                                    break

                    if ( cell1Still == 1):                
                        c1 = c1 
                        c2 = c2 + 1

                    elif (cell2Still == 1):  
                        c1 = c1 + 1
                        c2 = c2 
                    else: 
                        c1 = c1 + 1 
                        c2 = c2 + 1

        if ( cell1Still == 1):    
            p1 = p1 
            p2 = p2 + 1
            p3 = p3 + 1
            p4 = p4 + 1

        elif ( cell2Still == 1):    
            p1 = p1 + 1
            p2 = p2
            p3 = p3 + 1
            p4 = p4 + 1
        else:   
            p1 = p1 + 1
            p2 = p2 + 1
            p3 = p3 + 1
            p4 = p4 + 1
            p5 = 0
            p6 = 0
            cell2Items = []
            cell1Items = [] 
    
    print (" ---------------------------------------------------------------------")
    print (" ---------------------------------------------------------------------")

    print (" End of #####################" ,list1[0], " and ",list2[0]," ------------------------")

    print (" ---------------------------------------------------------------------")
    print (" ---------------------------------------------------------------------")

    return list1AfterComp,list2AfterComp
def spliteAndCompareTwoListsOfParsers(list1, list2):
    speratedList1 = []
    speratedList2 = []
    pos1 = 0
    pos2 = 0


    for i in range(0,len(list1)):
        newList1 = list1[i].split(" ")
        for j in range(0,len(newList1)):
            speratedList1.insert(pos1,newList1[j])
            pos1 = pos1 + 1

    for i in range(0,len(list2)):
        newList1 = list2[i].split(" ")
        for j in range(0,len(newList1)):
            speratedList2.insert(pos2,newList1[j])
            pos2 = pos2 + 1

    #speratedList1,speratedList2 = compareTwoListsOfParsers(speratedList1,speratedList2)

    return speratedList1,speratedList2

########################### End of definitions ###################################

###########################     Main Class   #####################################
menu = {}
menu['01']="Stanford parser                                                             #" 
menu['02']="Google parser                                                               #" 
menu['03']="SpaCY parser                                                                #"
menu['04']="NLTK parser                                                                 #"
menu['05']="All parsers                                                                 #" 
menu['06']="Compare Parsers Output (tokens)                                             #"  
menu['07']="Compare Parsers Output (token_$$_POS)                                       #"
menu['08']="Compare Parsers Output (tokens Manual Annotation)                           #" 
menu['09']="Compare Parsers Output (token_$$_POS Manual Annotation)                     #"
menu['10']="Compare Parsers Output (token_$$_POS in short form of POS)                  #"
menu['11']="Compare Parsers Output (token_$$_POS Manual Annotation in short form)       #"
menu['12']="Exit                                                                        #"

while True:
    print("######################### NLPCompare Menu ###############################")
    options=menu.keys()
    options.sort()
    for entry in options: 
        print "# "+entry, menu[entry]
    print("#################### End of NLPCompare Menu ############################"+"\n")

        
    selection = raw_input("Please, select one of the above options from the NLPCompare menu or 12 to exit: ")
    while  isBlank(selection):
        selection = raw_input("Please, you must select one of the above options from the NLPCompare menu or 12 to exit: ")
        if selection == '12':
                break
            
    if selection !='12' and not isBlank(selection):
        
#Checking the user input for the Excel file details
        
        changeExcelLocation = raw_input("Please, provide the path of the excel file or press enter key for default (Default: /mytmp/sample.xlsx): ")
        if  isBlank(changeExcelLocation):
            excelOutputFile = "/mytmp/sample.xlsx"
            print("\nThe Excel dir is: "+excelOutputFile)
        else:
            excelOutputFile = changeExcelLocation
            print("\nThe Excel dir is: "+excelOutputFile)

    #Checking the user input for the input file details
         
        inputUserDirCk = raw_input("\nPlease, write the input directory (Default:/mytmp/sample.txt): ")
        if inputUserDirCk == '12':
            break
        elif isBlank(inputUserDirCk):
            inputUserDir = "/mytmp/sample.txt"
            print("\nThe input dir is: "+inputUserDir)
        else:
           inputUserDir = inputUserDirCk
           print("\nThe input dir is: "+inputUserDir)
           
    #Checking the user input for the output file details
        if selection !='6' and selection != '7' and selection != '8' and selection != '9' and selection != '10' and selection != '11': 
            outputUserDirCk = raw_input("\nPlease, write the output directory (Default: /mytmp/output_file.txt): ")
            if outputUserDirCk == '12':
                break
            elif isBlank(outputUserDirCk):
                outputUserDir = "/mytmp/output_file.txt"
                print("\nThe output dir is: "+outputUserDir)
                print("\n(Note that it will overwrite the content)")
            else:
               outputUserDir = outputUserDirCk
           
    if selection =='1' or selection =='01':
        
      print "Stanford parser"
      print ("\nStanford parser has been selected...")
      print ("Starting the parsing process...\n")
      stanfordDef(inputUserDir,outputUserDir)
      
    elif selection == '2' or selection =='02': 
      print "Google parser"
      print ("\nGoogle parser has been selected...")
      print ("Starting the parsing process...\n")
      googleDef(inputUserDir,outputUserDir)
      
    elif selection == '3' or selection =='03':
      print ("\nSpaCY parser has been selected...")
      print ("Starting the parsing process...\n")
      spaCYDef(inputUserDir,outputUserDir)
      
    elif selection == '4' or selection =='04':
      print ("\nNLTK parser has been selected...")
      print ("Starting the parsing process...\n")
      NLTKDef(inputUserDir,outputUserDir)

    elif selection == '5' or selection =='05':
      print ("\nAll parsers option has been selected...")
      
      print ("\nStarting the Stanford parsing process...\n")
      stanfordDef(inputUserDir,outputUserDir+"_Stanford")
      
      print ("\nStarting the Google SyntaxNet parsing process...\n")
      googleDef(inputUserDir,outputUserDir+"_SyntaxNet")
      
      print ("\nStarting the spaCY parsing process...\n")
      spaCYDef(inputUserDir,outputUserDir+"_spaCY")
      
      print ("\nStarting the NLTK parsing process...\n")
      NLTKDef(inputUserDir,outputUserDir+"_NLTK")

    elif selection == '6' or selection =='06':
        print ("\nCounting and comparing the tokens of the parsers ... \n")

        ######## Standford CoreNLP VS Google SyntaxNet ########

        similarityList1 = []
        similarityList2 = []
        similarityList3 = []
        similarityList4 = []
        splitedList1 = []
        splitedList2 = []
        splitedList3 = []
        splitedList4 = []

        stanfordToken1 = []
        googelTokenList2 = []

        stanfordToken1, googelTokenList2 = formatTwoListsFromExcelSheetforTokensOnly('A','C',excelOutputFile,"Parsers_outputs")

        list1AfterCompToken, list2AfterCompToken = compareTwoListsOfParsers(stanfordToken1,googelTokenList2)

        postToExcel(list1AfterCompToken, excelOutputFile, "Parsers_outputs", "AU", "Stanford_token_list")
        postToExcel(list2AfterCompToken, excelOutputFile, "Parsers_outputs", "AV", "SyntaxNet_token_list")

        similarityList1 = postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'AW', 'AX', stanfordToken1, googelTokenList2, list1AfterCompToken, list2AfterCompToken,0)

        ######## Standford CoreNLP VS spaCy ########

        stanfordToken1 = []
        spaCyTokenList2 = []

        stanfordToken1, spaCyTokenList2 = formatTwoListsFromExcelSheetforTokensOnly('A','F',excelOutputFile,"Parsers_outputs")

        list1AfterCompToken, list2AfterCompToken = compareTwoListsOfParsers(stanfordToken1,spaCyTokenList2)

        postToExcel(list1AfterCompToken, excelOutputFile, "Parsers_outputs", "AZ", "Stanford_token_list")
        postToExcel(list2AfterCompToken, excelOutputFile, "Parsers_outputs", "BA", "spaCy_token_list")

        similarityList3 = postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'BB', 'BC', stanfordToken1, spaCyTokenList2, list1AfterCompToken, list2AfterCompToken,0)

        ######## Standford CoreNLP VS NLTK ########

        stanfordToken1 = []
        NLTKTokenList2 = []

        stanfordToken1, NLTKTokenList2 = formatTwoListsFromExcelSheetforTokensOnly('A','H',excelOutputFile,"Parsers_outputs")

        list1AfterCompToken, list2AfterCompToken = compareTwoListsOfParsers(stanfordToken1,NLTKTokenList2)

        postToExcel(list1AfterCompToken, excelOutputFile, "Parsers_outputs", "BE", "Stanford_token_list")
        postToExcel(list2AfterCompToken, excelOutputFile, "Parsers_outputs", "BF", "NLTK_token_list")

        postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'BG', 'BH', stanfordToken1, NLTKTokenList2, list1AfterCompToken, list2AfterCompToken,0)

        ######## SyntaxNet  VS sapCy ########

        googelTokenList1 = []
        spaCyTokenList2 = []

        googelTokenList1, spaCyTokenList2 = formatTwoListsFromExcelSheetforTokensOnly('C','F',excelOutputFile,"Parsers_outputs")

        list2AfterCompToken,  list1AfterCompToken= compareTwoListsOfParsers(googelTokenList1, spaCyTokenList2)

        postToExcel(list2AfterCompToken, excelOutputFile, "Parsers_outputs", "BJ", "SyntaxNet_token_list")
        postToExcel(list1AfterCompToken , excelOutputFile, "Parsers_outputs", "BK", "spaCy_token_list")

        postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'BL', 'BM', googelTokenList1, spaCyTokenList2, list2AfterCompToken,  list1AfterCompToken,0)

        ######## SyntaxNet  VS NLTK ########

        googelTokenList1 = []
        NLTKTokenList2 = []

        googelTokenList1, NLTKTokenList2 = formatTwoListsFromExcelSheetforTokensOnly('C','H',excelOutputFile,"Parsers_outputs")

        list1AfterCompToken, list2AfterCompToken = compareTwoListsOfParsers(googelTokenList1,NLTKTokenList2)

        postToExcel(list1AfterCompToken, excelOutputFile, "Parsers_outputs", "BO", "SyntaxNet_token_list")
        postToExcel(list2AfterCompToken, excelOutputFile, "Parsers_outputs", "BP", "NLTK_token_list")

        similarityList4 = postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'BQ', 'BR', googelTokenList1, NLTKTokenList2, list1AfterCompToken, list2AfterCompToken,0)

        ######## spaCy  VS NLTK ########

        spaCyTokenList1 = []
        NLTKTokenList2 = []

        spaCyTokenList1, NLTKTokenList2 = formatTwoListsFromExcelSheetforTokensOnly('F','H',excelOutputFile,"Parsers_outputs")

        list1AfterCompToken, list2AfterCompToken = compareTwoListsOfParsers(spaCyTokenList1,NLTKTokenList2)

        postToExcel(list1AfterCompToken, excelOutputFile, "Parsers_outputs", "BT", "spaCy_token_list")
        postToExcel(list2AfterCompToken, excelOutputFile, "Parsers_outputs", "BU", "NLTK_token_list")

        similarityList2 = postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'BV', 'BW', spaCyTokenList1, NLTKTokenList2, list1AfterCompToken, list2AfterCompToken,0)

        #compare stanford and Googel vs spaCy and NLTK
        splitedList1,splitedList2 = spliteAndCompareTwoListsOfParsers(similarityList1,similarityList2)
        postToExcel(splitedList1, excelOutputFile, "Parsers_outputs", "BY", "Stanford_tokens_and_Google_tokens_split_list")
        postToExcel(splitedList2, excelOutputFile, "Parsers_outputs", "BZ", "spaCy_tokens_and_NLTKM_tokens_split_list")  

        #Compare standford and spaCy vs Googel and NLTK
        splitedList3,splitedList4 = spliteAndCompareTwoListsOfParsers(similarityList3,similarityList4)
        postToExcel(splitedList3, excelOutputFile, "Parsers_outputs", "CB", "Stanford_tokens_and_spaCy_tokens_split_list")
        postToExcel(splitedList4, excelOutputFile, "Parsers_outputs", "CC", "Google_tokens_and_NLTKM_tokens_split_list") 

    elif selection == '7' or selection =='07':

        print ("\nCounting the number of paragraphs ... \n")
        count = 0
        with open(inputUserDir) as fileInput:
            for line in fileInput:
                count = count + 1

        print ("\nStarting the comparsion process of token_$$_POS...\n")

        ######## Standford CoreNLP VS Google SyntaxNet ########

        stanfordList1 = []
        googelList2 = []
        similarityList1 = []
        similarityList2 = []
        similarityList3 = []
        similarityList4 = []
        splitedList1 = []
        splitedList2 = []
        splitedList3 = []
        splitedList4 = []

        stanfordList1,googelList2 = formatTwoListsFromExcelSheet('A','B','C','E',excelOutputFile,"Parsers_outputs")

        list1AfterComp,list2AfterComp = compareTwoListsOfParsers(stanfordList1,googelList2)

        postToExcel(list1AfterComp, excelOutputFile, "Parsers_outputs", "k", "Stanford_POS_list")
        postToExcel(list2AfterComp, excelOutputFile, "Parsers_outputs", "L", "Google_POS_list")

        similarityList1 = postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'M', 'N', stanfordList1, googelList2, list1AfterComp, list2AfterComp,str(count))

        ######## Standford CoreNLP VS spaCY ########

        stanfordList1 = []
        spaCYList2 = []

        stanfordList1,spaCYList2 = formatTwoListsFromExcelSheet('A','B','F','G',excelOutputFile,"Parsers_outputs")

        list1AfterComp,list2AfterComp = compareTwoListsOfParsers(stanfordList1,spaCYList2)

        postToExcel(list1AfterComp, excelOutputFile, "Parsers_outputs", "P", "Stanford_POS_list")
        postToExcel(list2AfterComp, excelOutputFile, "Parsers_outputs", "Q", "spaCY_POS_list")

        similarityList3 = postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'R', 'S', stanfordList1, spaCYList2, list1AfterComp, list2AfterComp,str(count))

        ######## Standford CoreNLP VS NLTK ########

        stanfordList1 = []
        NLTKList2 = []

        stanfordList1,NLTKList2 = formatTwoListsFromExcelSheet('A','B','H','I',excelOutputFile,"Parsers_outputs")

        list1AfterComp,list2AfterComp = compareTwoListsOfParsers(stanfordList1,NLTKList2)

        postToExcel(list1AfterComp, excelOutputFile, "Parsers_outputs", "U", "Stanford_POS_list")
        postToExcel(list2AfterComp, excelOutputFile, "Parsers_outputs", "V", "NLTK_POS_list")

        postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'W', 'X', stanfordList1, NLTKList2, list1AfterComp, list2AfterComp,str(count))

        ######## Google SyntaxNet VS spaCY ########

        googelList1 = []
        spaCYList2 = []

        googelList1,spaCYList2 = formatTwoListsFromExcelSheet('C','E','F','G',excelOutputFile,"Parsers_outputs")

        list1AfterComp,list2AfterComp = compareTwoListsOfParsers(googelList1,spaCYList2)

        postToExcel(list1AfterComp, excelOutputFile, "Parsers_outputs", "Z", "Google_POS_list")
        postToExcel(list2AfterComp, excelOutputFile, "Parsers_outputs", "AA", "spaCY_POS_list")

        postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'AB', 'AC', googelList1, spaCYList2, list1AfterComp, list2AfterComp,str(count))

        ######## Google SyntaxNet VS NLTK ########

        googelList1 = []
        NLTKList2 = []

        googelList1,NLTKList2 = formatTwoListsFromExcelSheet('C','E','H','I',excelOutputFile,"Parsers_outputs")

        list1AfterComp,list2AfterComp = compareTwoListsOfParsers(googelList1,NLTKList2)

        postToExcel(list1AfterComp, excelOutputFile, "Parsers_outputs", "AE", "Google_POS_list")
        postToExcel(list2AfterComp, excelOutputFile, "Parsers_outputs", "AF", "NLTK_POS_list")

        similarityList4 = postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'AG', 'AH', googelList1, NLTKList2, list1AfterComp, list2AfterComp,str(count))

        #Compare standford and spaCy vs Googel and NLTK
        splitedList3,splitedList4 = spliteAndCompareTwoListsOfParsers(similarityList3,similarityList4)
        postToExcel(splitedList3, excelOutputFile, "Parsers_outputs", "AR", "Stanford_POS_and_spaCy_POS_split_list")
        postToExcel(splitedList4, excelOutputFile, "Parsers_outputs", "AS", "Google_POS_and_NLTKM_POS_split_list") 

        ######## spaCY VS NLTK ########

        spaCYList1 = []
        NLTKList2 = []

        spaCYList1,NLTKList2 = formatTwoListsFromExcelSheet('F','G','H','I',excelOutputFile,"Parsers_outputs")

        list1AfterComp,list2AfterComp = compareTwoListsOfParsers(spaCYList1,NLTKList2)

        postToExcel(list1AfterComp, excelOutputFile, "Parsers_outputs", "AJ", "spaCY_POS_list")
        postToExcel(list2AfterComp, excelOutputFile, "Parsers_outputs", "AK", "NLTK_POS_list")

        similarityList2 = postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'AL', 'AM', spaCYList1, NLTKList2, list1AfterComp, list2AfterComp,str(count))

        #compare stanford and Googel vs spaCy and NLTK
        splitedList1,splitedList2 = spliteAndCompareTwoListsOfParsers(similarityList1,similarityList2)
        postToExcel(splitedList1, excelOutputFile, "Parsers_outputs", "AO", "Stanford_POS_and_Google_POS_split_list")
        postToExcel(splitedList2, excelOutputFile, "Parsers_outputs", "AP", "spaCy_POS_and_NLTKM_POS_split_list") 

    elif selection == '8' or selection =='08':

        print ("\nStarting the comparsion for the tokens of the Manual Annotation with the other NLP libraries... \n")
        list1AfterCompToken = []
        list2AfterCompToken = []
        similarityList1 = []
        similarityList2 = []
        similarityList3 = []
        similarityList4 = []
        splitedList1 = []
        splitedList2 = []
        splitedList3 = []
        splitedList4 = []
        ######## Standford CoreNLP VS Manual ########

        stanfordToken1 = []
        manualTokenList2 = []

        stanfordToken1, manualTokenList2 = formatTwoListsFromExcelSheetforTokensOnly('A','I',excelOutputFile,"Parsers_outputs")

        list1AfterCompToken, list2AfterCompToken = compareTwoListsOfParsers(stanfordToken1,manualTokenList2)

        postToExcel(list1AfterCompToken, excelOutputFile, "Parsers_outputs", "AM", "Stanford_token_list")
        postToExcel(list2AfterCompToken, excelOutputFile, "Parsers_outputs", "AN", "Manual_POS_list")

        similarityList1 = postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'AO', 'AP', stanfordToken1, manualTokenList2, list1AfterCompToken, list2AfterCompToken,0)

        ######## googel VS Manual ########

        googleTokenList1 = []
        manualTokenList2 = []

        googleTokenList1, manualTokenList2 = formatTwoListsFromExcelSheetforTokensOnly('C','I',excelOutputFile,"Parsers_outputs")

        list1AfterCompToken, list2AfterCompToken = compareTwoListsOfParsers(googleTokenList1,manualTokenList2)

        postToExcel(list1AfterCompToken, excelOutputFile, "Parsers_outputs", "AR", "Google_POS_list")
        postToExcel(list2AfterCompToken, excelOutputFile, "Parsers_outputs", "AS", "Manual_POS_list")

        similarityList2 = postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'AT', 'AU', googleTokenList1, manualTokenList2, list1AfterCompToken, list2AfterCompToken,0)

        ######## SspaCy VS Manual ########
        spaCyTokenList1 = []
        manualTokenList2 = []

        spaCyTokenList1, manualTokenList2 = formatTwoListsFromExcelSheetforTokensOnly('E','I',excelOutputFile,"Parsers_outputs")

        list1AfterCompToken, list2AfterCompToken = compareTwoListsOfParsers(spaCyTokenList1,manualTokenList2)

        postToExcel(list1AfterCompToken, excelOutputFile, "Parsers_outputs", "AW", "spaCy_token_list")
        postToExcel(list2AfterCompToken, excelOutputFile, "Parsers_outputs", "AX", "Manual_POS_list")

        similarityList3 = postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'AY', 'AZ', spaCyTokenList1, manualTokenList2, list1AfterCompToken, list2AfterCompToken,0)

        ######## NLTK VS Manual ########

        NLTKTokenList1 = []
        manualTokenList2 = []

        NLTKTokenList1, manualTokenList2 = formatTwoListsFromExcelSheetforTokensOnly('G','I',excelOutputFile,"Parsers_outputs")

        list1AfterCompToken, list2AfterCompToken = compareTwoListsOfParsers(NLTKTokenList1,manualTokenList2)

        postToExcel(list1AfterCompToken, excelOutputFile, "Parsers_outputs", "BB", "NLTK_POS_list")
        postToExcel(list2AfterCompToken, excelOutputFile, "Parsers_outputs", "BC", "Manual_POS_list")

        similarityList4 = postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'BD', 'BE', NLTKTokenList1, manualTokenList2, list1AfterCompToken, list2AfterCompToken,0)

        #compare stanford and manual vs google and mmanual
        splitedList1,splitedList2 = spliteAndCompareTwoListsOfParsers(similarityList1,similarityList2)
        postToExcel(splitedList1, excelOutputFile, "Parsers_outputs", "BG", "Stanford_tokens_and_manual_tokens_split_list")
        postToExcel(splitedList2, excelOutputFile, "Parsers_outputs", "BH", "Google_tokens_and_manual_tokens_split_list")  

        #compare spaCy and manual vs NLTK and mmanual
        splitedList3,splitedList4 = spliteAndCompareTwoListsOfParsers(similarityList3,similarityList4)
        postToExcel(splitedList3, excelOutputFile, "Parsers_outputs", "BJ", "spaCy_tokens_and_manual_tokens_split_list")
        postToExcel(splitedList4, excelOutputFile, "Parsers_outputs", "BK", "NLTK_tokens_and_manual_tokens_split_list") 

    elif selection == '9' or selection =='09':

        print ("\nCounting the number of paragraphs ... \n")
        count = 0
        with open(inputUserDir) as fileInput:
            for line in fileInput:
                count = count + 1

        print ("\nStarting the comparsion for the token_$$_POS of the Manual Annotation with the other NLP libraries... \n")

        list1AfterComp = []
        list2AfterComp = []
        similarityList1 = []
        similarityList2 = []
        similarityList3 = []
        similarityList4 = []
        splitedList1 = []
        splitedList2 = []
        splitedList3 = []
        splitedList4 = []
        ######## Standford CoreNLP VS Manual ########

        stanfordList1 = []
        manualList2 = []

        stanfordList1,manualList2 = formatTwoListsFromExcelSheet('A','B','I','J',excelOutputFile,"Parsers_outputs")

        list1AfterComp,list2AfterComp = compareTwoListsOfParsers(stanfordList1,manualList2)

        postToExcel(list1AfterComp, excelOutputFile, "Parsers_outputs", "M", "Stanford_POS_list")
        postToExcel(list2AfterComp, excelOutputFile, "Parsers_outputs", "N", "Manual_POS_list")

        similarityList1 = postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'O', 'P', stanfordList1, manualList2, list1AfterComp, list2AfterComp,str(count))

       ######## Google  VS Manual ########

        googelList1 = []
        manualList2 = []

        googelList1,manualList2 = formatTwoListsFromExcelSheet('C','D','I','J',excelOutputFile,"Parsers_outputs")

        list1AfterComp,list2AfterComp = compareTwoListsOfParsers(googelList1,manualList2)

        postToExcel(list1AfterComp, excelOutputFile, "Parsers_outputs", "R", "Google_POS_list")
        postToExcel(list2AfterComp, excelOutputFile, "Parsers_outputs", "S", "Manual_POS_list")

        similarityList2 = postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'T', 'U', googelList1, manualList2, list1AfterComp, list2AfterComp,str(count))

       ######## spaCy  VS Manual ########

        spaCYList1 = []
        manualList2 = []

        spaCYList1,manualList2 = formatTwoListsFromExcelSheet('E','F','I','J',excelOutputFile,"Parsers_outputs")

        list1AfterComp,list2AfterComp = compareTwoListsOfParsers(spaCYList1,manualList2)

        postToExcel(list1AfterComp, excelOutputFile, "Parsers_outputs", "W", "spaCY_POS_list")
        postToExcel(list2AfterComp, excelOutputFile, "Parsers_outputs", "X", "Manual_POS_list")

        similarityList3 = postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'Y', 'Z', spaCYList1, manualList2, list1AfterComp, list2AfterComp,str(count))

        ####### NLTK  VS  ########

        NLTKList1 = []
        manualList2 = []

        NLTKList1,manualList2 = formatTwoListsFromExcelSheet('G','H','I','J',excelOutputFile,"Parsers_outputs")

        list1AfterComp,list2AfterComp = compareTwoListsOfParsers(NLTKList1,manualList2)

        postToExcel(list1AfterComp, excelOutputFile, "Parsers_outputs", "AB", "NLTK_POS_list")
        postToExcel(list2AfterComp, excelOutputFile, "Parsers_outputs", "AC", "Manual_POS_list")

        similarityList4 = postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'AD', 'AF', NLTKList1, manualList2, list1AfterComp, list2AfterComp,str(count))

        #compare stanford and manual vs google and mmanual
        splitedList1,splitedList2 = spliteAndCompareTwoListsOfParsers(similarityList1,similarityList2)
        postToExcel(splitedList1, excelOutputFile, "Parsers_outputs", "AG", "Stanford_POS_and_manual_POS_split_list")
        postToExcel(splitedList2, excelOutputFile, "Parsers_outputs", "AH", "Google_POS_and_manual_tokens_split_list")  

        #compare spaCy and manual vs NLTK and mmanual
        splitedList3,splitedList4 = spliteAndCompareTwoListsOfParsers(similarityList3,similarityList4)
        postToExcel(splitedList3, excelOutputFile, "Parsers_outputs", "AJ", "spaCy_POS_and_manual_POS_split_list")
        postToExcel(splitedList4, excelOutputFile, "Parsers_outputs", "AK", "NLTK_POS_and_manual_POS_split_list") 

    elif selection == '10' or selection =='10':

        print ("\nCounting the number of paragraphs ... \n")
        count = 0
        with open(inputUserDir) as fileInput:
            for line in fileInput:
                count = count + 1

        print ("\nStarting the removal of the 3rd letter of POS...the comparsion process of token_$$_POS (in short form of POS) i.e. removing the 3rd letter of POS...\n")

        stanford = []
        google = []
        spacy = []
        NLTK = []

        PO_stanford = []
        PO_google = []
        PO_spacy = []
        PO_NLTK = []


        similarityList1 = []
        similarityList2 = []
        similarityList3 = []
        similarityList4 = []
        splitedList1 = []
        splitedList2 = []
        splitedList3 = []
        splitedList4 = []

        #Retrive the token list of each parser 
        stanford = retriveExcelColumn('A',excelOutputFile,"Parsers_outputs")
        google = retriveExcelColumn('C',excelOutputFile,"Parsers_outputs")
        spacy = retriveExcelColumn('F',excelOutputFile,"Parsers_outputs")
        NLTK = retriveExcelColumn('H',excelOutputFile,"Parsers_outputs")

        #Retrive the column from the Excel file
        PO_stanford = retrivePOfromList('B',excelOutputFile,"Parsers_outputs")
        PO_google = retrivePOfromList('E',excelOutputFile,"Parsers_outputs")
        PO_spacy = retrivePOfromList('G',excelOutputFile,"Parsers_outputs")
        PO_NLTK = retrivePOfromList('I',excelOutputFile,"Parsers_outputs")

        #Post back all the parser lists to their new location 
        postToExcel(stanford, excelOutputFile, "Parsers_outputs", "K", "Stanford_token_list")
        postToExcel(google, excelOutputFile, "Parsers_outputs", "M", "google_token_list") 
        postToExcel(spacy, excelOutputFile, "Parsers_outputs", "O", "spacy_token_list") 
        postToExcel(NLTK, excelOutputFile, "Parsers_outputs", "Q", "NLTK_token_list")  

        #Post all POS after the transformatin process (to PO) back to Excel 
        postToExcel(PO_stanford, excelOutputFile, "Parsers_outputs", "L", "Stanford_PO_list")
        postToExcel(PO_google, excelOutputFile, "Parsers_outputs", "N", "google_PO_list") 
        postToExcel(PO_spacy, excelOutputFile, "Parsers_outputs", "P", "spacy_PO_list") 
        postToExcel(PO_NLTK, excelOutputFile, "Parsers_outputs", "R", "NLTK_PO_list")  

        print("\nStarting the comparsion process of token_$$_POS...")

        ######## Standford CoreNLP VS Google SyntaxNet ########
        stanfordList1 = []
        googelList2 = []

        stanfordList1,googelList2 = formatTwoListsFromExcelSheet('K','L','M','N',excelOutputFile,"Parsers_outputs")

        list1AfterComp,list2AfterComp = compareTwoListsOfParsers(stanfordList1,googelList2)

        postToExcel(list1AfterComp, excelOutputFile, "Parsers_outputs", "T", "Stanford_POS_list")
        postToExcel(list2AfterComp, excelOutputFile, "Parsers_outputs", "U", "Google_POS_list")

        similarityList1 = postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'V', 'W', stanfordList1, googelList2, list1AfterComp, list2AfterComp,str(count))

        ######## Standford CoreNLP VS spaCY ########

        stanfordList1 = []
        spaCYList2 = []

        stanfordList1,spaCYList2 = formatTwoListsFromExcelSheet('K','L','O','P',excelOutputFile,"Parsers_outputs")

        list1AfterComp,list2AfterComp = compareTwoListsOfParsers(stanfordList1,spaCYList2)

        postToExcel(list1AfterComp, excelOutputFile, "Parsers_outputs", "Y", "Stanford_POS_list")
        postToExcel(list2AfterComp, excelOutputFile, "Parsers_outputs", "Z", "spaCY_POS_list")

        similarityList3 = postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'AA', 'AB', stanfordList1, spaCYList2, list1AfterComp, list2AfterComp,str(count))

        ######## Standford CoreNLP VS NLTK ########

        stanfordList1 = []
        NLTKList2 = []

        stanfordList1,NLTKList2 = formatTwoListsFromExcelSheet('K','L','Q','R',excelOutputFile,"Parsers_outputs")

        list1AfterComp,list2AfterComp = compareTwoListsOfParsers(stanfordList1,NLTKList2)

        postToExcel(list1AfterComp, excelOutputFile, "Parsers_outputs", "AD", "Stanford_POS_list")
        postToExcel(list2AfterComp, excelOutputFile, "Parsers_outputs", "AE", "NLTK_POS_list")

        postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'AF', 'AG', stanfordList1, NLTKList2, list1AfterComp, list2AfterComp,str(count))

        ######## Google SyntaxNet VS spaCY ########

        googelList1 = []
        spaCYList2 = []

        googelList1,spaCYList2 = formatTwoListsFromExcelSheet('M','N','O','P',excelOutputFile,"Parsers_outputs")

        list1AfterComp,list2AfterComp = compareTwoListsOfParsers(googelList1,spaCYList2)

        postToExcel(list1AfterComp, excelOutputFile, "Parsers_outputs", "AI", "Google_POS_list")
        postToExcel(list2AfterComp, excelOutputFile, "Parsers_outputs", "AJ", "spaCY_POS_list")

        postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'AK', 'AL', googelList1, spaCYList2, list1AfterComp, list2AfterComp,str(count))

        ######## Google SyntaxNet VS NLTK ########

        googelList1 = []
        NLTKList2 = []

        googelList1,NLTKList2 = formatTwoListsFromExcelSheet('M','N','Q','R',excelOutputFile,"Parsers_outputs")

        list1AfterComp,list2AfterComp = compareTwoListsOfParsers(googelList1,NLTKList2)

        postToExcel(list1AfterComp, excelOutputFile, "Parsers_outputs", "AN", "Google_POS_list")
        postToExcel(list2AfterComp, excelOutputFile, "Parsers_outputs", "AO", "NLTK_POS_list")

        similarityList4 = postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'AP', 'AQ', googelList1, NLTKList2, list1AfterComp, list2AfterComp,str(count))

        ######## spaCY VS NLTK ########

        spaCYList1 = []
        NLTKList2 = []

        spaCYList1,NLTKList2 = formatTwoListsFromExcelSheet('O','P','Q','R',excelOutputFile,"Parsers_outputs")

        list1AfterComp,list2AfterComp = compareTwoListsOfParsers(spaCYList1,NLTKList2)

        postToExcel(list1AfterComp, excelOutputFile, "Parsers_outputs", "AS", "spaCY_POS_list")
        postToExcel(list2AfterComp, excelOutputFile, "Parsers_outputs", "AT", "NLTK_POS_list")

        similarityList2 = postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'AU', 'AV', spaCYList1, NLTKList2, list1AfterComp, list2AfterComp,str(count))


        #compare stanford and Googel vs spaCy and NLTK
        splitedList1,splitedList2 = spliteAndCompareTwoListsOfParsers(similarityList1,similarityList2)
        postToExcel(splitedList1, excelOutputFile, "Parsers_outputs", "AX", "Stanford_POS_and_Google_POS_split_list")
        postToExcel(splitedList2, excelOutputFile, "Parsers_outputs", "AY", "spaCy_POS_and_NLTKM_POS_split_list") 

        #Compare standford and spaCy vs Googel and NLTK
        splitedList3,splitedList4 = spliteAndCompareTwoListsOfParsers(similarityList3,similarityList4)
        postToExcel(splitedList3, excelOutputFile, "Parsers_outputs", "BA", "Stanford_POS_and_spaCy_POS_split_list")
        postToExcel(splitedList4, excelOutputFile, "Parsers_outputs", "BB", "Google_POS_and_NLTKM_POS_split_list") 

    elif selection == '11' or selection =='11':

        print ("\nCounting the number of paragraphs ... \n")
        count = 0
        with open(inputUserDir) as fileInput:
            for line in fileInput:
                count = count + 1

        print ("\nStarting the removal of the 3rd letter of POS...the comparsion process of token_$$_POS Mnual Annotation (in short form of POS) i.e. removing the 3rd letter of POS...\n")

        stanford = []
        google = []
        spacy = []
        NLTK = []
        manual = []

        PO_stanford = []
        PO_google = []
        PO_spacy = []
        PO_NLTK = []
        PO_manual = []


        similarityList1 = []
        similarityList2 = []
        similarityList3 = []
        similarityList4 = []
        splitedList1 = []
        splitedList2 = []
        splitedList3 = []
        splitedList4 = []

        #Retrive the token list of each parser 
        stanford = retriveExcelColumn('A',excelOutputFile,"Parsers_outputs")
        google = retriveExcelColumn('C',excelOutputFile,"Parsers_outputs")
        spacy = retriveExcelColumn('E',excelOutputFile,"Parsers_outputs")
        NLTK = retriveExcelColumn('G',excelOutputFile,"Parsers_outputs")
        manual = retriveExcelColumn('I',excelOutputFile,"Parsers_outputs")

        #Retrive the column from the Excel file
        PO_stanford = retrivePOfromList('B',excelOutputFile,"Parsers_outputs")
        PO_google = retrivePOfromList('D',excelOutputFile,"Parsers_outputs")
        PO_spacy = retrivePOfromList('F',excelOutputFile,"Parsers_outputs")
        PO_NLTK = retrivePOfromList('H',excelOutputFile,"Parsers_outputs")
        PO_manual = retrivePOfromList('J',excelOutputFile,"Parsers_outputs")


        #Post back all the parser lists to their new location 
        postToExcel(stanford, excelOutputFile, "Parsers_outputs", "L", "Stanford_token_list")
        postToExcel(google, excelOutputFile, "Parsers_outputs", "N", "google_token_list") 
        postToExcel(spacy, excelOutputFile, "Parsers_outputs", "P", "spacy_token_list") 
        postToExcel(NLTK, excelOutputFile, "Parsers_outputs", "R", "NLTK_token_list")
        postToExcel(manual, excelOutputFile, "Parsers_outputs", "T", "manual_token_list")           

        #Post all POS after the transformatin process (to PO) back to Excel 
        postToExcel(PO_stanford, excelOutputFile, "Parsers_outputs", "M", "Stanford_PO_list")
        postToExcel(PO_google, excelOutputFile, "Parsers_outputs", "O", "google_PO_list") 
        postToExcel(PO_spacy, excelOutputFile, "Parsers_outputs", "Q", "spacy_PO_list") 
        postToExcel(PO_NLTK, excelOutputFile, "Parsers_outputs", "S", "NLTK_PO_list")  
        postToExcel(PO_manual, excelOutputFile, "Parsers_outputs", "U", "manual_PO_list") 

        print("\nStarting the comparsion process of token_$$_POS...")

        ######## Standford CoreNLP VS Manual ########

        stanfordList1 = []
        manualList2 = []

        stanfordList1,manualList2 = formatTwoListsFromExcelSheet('L','M','T','U',excelOutputFile,"Parsers_outputs")

        list1AfterComp,list2AfterComp = compareTwoListsOfParsers(stanfordList1,manualList2)

        postToExcel(list1AfterComp, excelOutputFile, "Parsers_outputs", "W", "Stanford_POS_list")
        postToExcel(list2AfterComp, excelOutputFile, "Parsers_outputs", "X", "Manual_POS_list")

        similarityList1 = postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'Y', 'Z', stanfordList1, manualList2, list1AfterComp, list2AfterComp,str(count))

       ######## Google  VS Manual ########

        googelList1 = []
        manualList2 = []

        googelList1,manualList2 = formatTwoListsFromExcelSheet('N','O','T','U',excelOutputFile,"Parsers_outputs")

        list1AfterComp,list2AfterComp = compareTwoListsOfParsers(googelList1,manualList2)

        postToExcel(list1AfterComp, excelOutputFile, "Parsers_outputs", "AB", "Google_POS_list")
        postToExcel(list2AfterComp, excelOutputFile, "Parsers_outputs", "AC", "Manual_POS_list")

        similarityList2 = postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'AD', 'AE', googelList1, manualList2, list1AfterComp, list2AfterComp,str(count))

       ######## spaCy  VS Manual ########

        spaCYList1 = []
        manualList2 = []

        spaCYList1,manualList2 = formatTwoListsFromExcelSheet('P','Q','T','U',excelOutputFile,"Parsers_outputs")

        list1AfterComp,list2AfterComp = compareTwoListsOfParsers(spaCYList1,manualList2)

        postToExcel(list1AfterComp, excelOutputFile, "Parsers_outputs", "AG", "spaCY_POS_list")
        postToExcel(list2AfterComp, excelOutputFile, "Parsers_outputs", "AH", "Manual_POS_list")

        similarityList3 = postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'AI', 'AJ', spaCYList1, manualList2, list1AfterComp, list2AfterComp,str(count))

        ####### NLTK  VS  ########

        NLTKList1 = []
        manualList2 = []

        NLTKList1,manualList2 = formatTwoListsFromExcelSheet('R','S','T','U',excelOutputFile,"Parsers_outputs")

        list1AfterComp,list2AfterComp = compareTwoListsOfParsers(NLTKList1,manualList2)

        postToExcel(list1AfterComp, excelOutputFile, "Parsers_outputs", "AL", "NLTK_POS_list")
        postToExcel(list2AfterComp, excelOutputFile, "Parsers_outputs", "AM", "Manual_POS_list")

        similarityList4 = postStatToExcel4TwoParsers(excelOutputFile, "Parsers_outputs", 'AN', 'AO', NLTKList1, manualList2, list1AfterComp, list2AfterComp,str(count))

        #compare stanford and manual vs google and mmanual
        splitedList1,splitedList2 = spliteAndCompareTwoListsOfParsers(similarityList1,similarityList2)
        postToExcel(splitedList1, excelOutputFile, "Parsers_outputs", "AQ", "Stanford_POS_and_manual_POS_split_list")
        postToExcel(splitedList2, excelOutputFile, "Parsers_outputs", "AR", "Google_POS_and_manual_tokens_split_list")  

        #compare spaCy and manual vs NLTK and mmanual
        splitedList3,splitedList4 = spliteAndCompareTwoListsOfParsers(similarityList3,similarityList4)
        postToExcel(splitedList3, excelOutputFile, "Parsers_outputs", "AS", "spaCy_POS_and_manual_POS_split_list")
        postToExcel(splitedList4, excelOutputFile, "Parsers_outputs", "AT", "NLTK_POS_and_manual_POS_split_list") 

    elif selection == '12': 
      break
    else: 
      print ("Oops...Unknown Option Selected!. Please select from the a number from the menu")
      break
###########################    End of the Main Class    ######################################
